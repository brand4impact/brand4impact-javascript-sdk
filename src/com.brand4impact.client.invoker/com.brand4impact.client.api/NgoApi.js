/**
 * Total API Reference
 * Este contrato se usara para generar los clientes con todos los servicios necesarios.  `!Uso exclusivo interno!`               --- 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@brand4impact.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PlatformNgo from '../com.brand4impact.client.model/PlatformNgo';
import PlatformNgoCreate from '../com.brand4impact.client.model/PlatformNgoCreate';
import PlatformNgoCreateAdmin from '../com.brand4impact.client.model/PlatformNgoCreateAdmin';
import PlatformNgoCreateLegal from '../com.brand4impact.client.model/PlatformNgoCreateLegal';
import PlatformNgoUpdate from '../com.brand4impact.client.model/PlatformNgoUpdate';
import PlatformNgoUpdateBank from '../com.brand4impact.client.model/PlatformNgoUpdateBank';
import PlatformNgoUpdateLegal from '../com.brand4impact.client.model/PlatformNgoUpdateLegal';
import RestError from '../com.brand4impact.client.model/RestError';

/**
* Ngo service.
* @module com.brand4impact.client.invoker/com.brand4impact.client.api/NgoApi
* @version 0.0.1
*/
export default class NgoApi {

    /**
    * Constructs a new NgoApi. 
    * @alias module:com.brand4impact.client.invoker/com.brand4impact.client.api/NgoApi
    * @class
    * @param {module:com.brand4impact.client.invoker/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:com.brand4impact.client.invoker/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNgo operation.
     * @callback module:com.brand4impact.client.invoker/com.brand4impact.client.api/NgoApi~createNgoCallback
     * @param {String} error Error message, if any.
     * @param {module:com.brand4impact.client.invoker/com.brand4impact.client.model/PlatformNgo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new NGO
     * Register a new NGO allows you to have visibiliy that your NGO deserves, being visible to brand4impact users, and opting for their donations
     * @param {module:com.brand4impact.client.invoker/com.brand4impact.client.model/PlatformNgoCreate} ngo 
     * @param {module:com.brand4impact.client.invoker/com.brand4impact.client.model/PlatformNgoCreateLegal} legal 
     * @param {module:com.brand4impact.client.invoker/com.brand4impact.client.model/PlatformNgoCreateAdmin} admin 
     * @param {module:com.brand4impact.client.invoker/com.brand4impact.client.api/NgoApi~createNgoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.brand4impact.client.invoker/com.brand4impact.client.model/PlatformNgo}
     */
    createNgo(ngo, legal, admin, callback) {
      let postBody = null;
      // verify the required parameter 'ngo' is set
      if (ngo === undefined || ngo === null) {
        throw new Error("Missing the required parameter 'ngo' when calling createNgo");
      }
      // verify the required parameter 'legal' is set
      if (legal === undefined || legal === null) {
        throw new Error("Missing the required parameter 'legal' when calling createNgo");
      }
      // verify the required parameter 'admin' is set
      if (admin === undefined || admin === null) {
        throw new Error("Missing the required parameter 'admin' when calling createNgo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ngo': ngo,
        'legal': legal,
        'admin': admin
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PlatformNgo;
      return this.apiClient.callApi(
        '/rest/platform/ngo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNgo operation.
     * @callback module:com.brand4impact.client.invoker/com.brand4impact.client.api/NgoApi~getNgoCallback
     * @param {String} error Error message, if any.
     * @param {module:com.brand4impact.client.invoker/com.brand4impact.client.model/PlatformNgo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get your NGO
     * This method returns the NGO inside your tenant (theres no need to know the NGO token)  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png 'security')](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png 'multi-tenant')](http://localhost:8080/backend/blog/home#multitenant)
     * @param {module:com.brand4impact.client.invoker/com.brand4impact.client.api/NgoApi~getNgoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.brand4impact.client.invoker/com.brand4impact.client.model/PlatformNgo}
     */
    getNgo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlatformNgo;
      return this.apiClient.callApi(
        '/rest/platform/ngo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNgo operation.
     * @callback module:com.brand4impact.client.invoker/com.brand4impact.client.api/NgoApi~updateNgoCallback
     * @param {String} error Error message, if any.
     * @param {module:com.brand4impact.client.invoker/com.brand4impact.client.model/PlatformNgo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update NGO data
     * This method updates any data for the NGO  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png 'security')](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png 'multi-tenant')](http://localhost:8080/backend/blog/home#multitenant)
     * @param {module:com.brand4impact.client.invoker/com.brand4impact.client.model/PlatformNgoUpdate} ngo 
     * @param {File} logo 
     * @param {module:com.brand4impact.client.invoker/com.brand4impact.client.api/NgoApi~updateNgoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.brand4impact.client.invoker/com.brand4impact.client.model/PlatformNgo}
     */
    updateNgo(ngo, logo, callback) {
      let postBody = null;
      // verify the required parameter 'ngo' is set
      if (ngo === undefined || ngo === null) {
        throw new Error("Missing the required parameter 'ngo' when calling updateNgo");
      }
      // verify the required parameter 'logo' is set
      if (logo === undefined || logo === null) {
        throw new Error("Missing the required parameter 'logo' when calling updateNgo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ngo': ngo,
        'logo': logo
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PlatformNgo;
      return this.apiClient.callApi(
        '/rest/platform/ngo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNgoBank operation.
     * @callback module:com.brand4impact.client.invoker/com.brand4impact.client.api/NgoApi~updateNgoBankCallback
     * @param {String} error Error message, if any.
     * @param {module:com.brand4impact.client.invoker/com.brand4impact.client.model/PlatformNgo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update bank NGO info
     * This method updates the bank info for your NGO  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png 'security')](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png 'multi-tenant')](http://localhost:8080/backend/blog/home#multitenant)
     * @param {module:com.brand4impact.client.invoker/com.brand4impact.client.model/PlatformNgoUpdateBank} bank 
     * @param {module:com.brand4impact.client.invoker/com.brand4impact.client.api/NgoApi~updateNgoBankCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.brand4impact.client.invoker/com.brand4impact.client.model/PlatformNgo}
     */
    updateNgoBank(bank, callback) {
      let postBody = null;
      // verify the required parameter 'bank' is set
      if (bank === undefined || bank === null) {
        throw new Error("Missing the required parameter 'bank' when calling updateNgoBank");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'bank': bank
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PlatformNgo;
      return this.apiClient.callApi(
        '/rest/platform/ngo/bank', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNgoLegal operation.
     * @callback module:com.brand4impact.client.invoker/com.brand4impact.client.api/NgoApi~updateNgoLegalCallback
     * @param {String} error Error message, if any.
     * @param {module:com.brand4impact.client.invoker/com.brand4impact.client.model/PlatformNgo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update legal NGO info
     * This method updates the legal info for your NGO  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png 'security')](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png 'multi-tenant')](http://localhost:8080/backend/blog/home#multitenant)
     * @param {module:com.brand4impact.client.invoker/com.brand4impact.client.model/PlatformNgoUpdateLegal} legal 
     * @param {module:com.brand4impact.client.invoker/com.brand4impact.client.api/NgoApi~updateNgoLegalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.brand4impact.client.invoker/com.brand4impact.client.model/PlatformNgo}
     */
    updateNgoLegal(legal, callback) {
      let postBody = null;
      // verify the required parameter 'legal' is set
      if (legal === undefined || legal === null) {
        throw new Error("Missing the required parameter 'legal' when calling updateNgoLegal");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'legal': legal
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PlatformNgo;
      return this.apiClient.callApi(
        '/rest/platform/ngo/legal', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadNgoFiles operation.
     * @callback module:com.brand4impact.client.invoker/com.brand4impact.client.api/NgoApi~uploadNgoFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.brand4impact.client.invoker/com.brand4impact.client.model/PlatformNgo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload NGO files
     * This method uploads documentation (files, images, ...) of a NGO  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png 'security')](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png 'multi-tenant')](http://localhost:8080/backend/blog/home#multitenant)
     * @param {File} file 
     * @param {module:com.brand4impact.client.invoker/com.brand4impact.client.api/NgoApi~uploadNgoFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.brand4impact.client.invoker/com.brand4impact.client.model/PlatformNgo}
     */
    uploadNgoFiles(file, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadNgoFiles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PlatformNgo;
      return this.apiClient.callApi(
        '/rest/platform/ngo/upload', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
